
'use string';

function ClientManager( userList ) {

	var Self			= this;
	Self.clientList 	= [];
	Self.userList 		= userList;
};


/* 		Searches for a user / profile with the given 'username'
**
**		username: 			User Profile name to look for
**      returns:   			A user profile / False if not found
**
*/ 
ClientManager.prototype.userSearch = function ( username ) {
	var Self = this;

	for (var i=0; i<Self.userList.length; i++) {
		if ( Self.userList[i].username.toLowerCase() == username.toLowerCase() ) {
			return Self.userList[i];
		}
	}

	return false;
};


ClientManager.prototype.addClient = function( client ) {
	var Self = this;

	// Authentificate and add to Clients Array
	if ( Self.authentificate( client )) {
		Self.clientList[client.socket.id] = client;
	}

	// Bind events to the new client
	 this.bindEvents( client );
};


/* 		Bind all the basic events to the given client socket
**
**		socket:             Socket to be authentificated
**                 
*/ 
ClientManager.prototype.bindEvents = function( client ) {
	var Self = this;

	// @ Disconnect
	//	
	client.socket.on('disconnect', function() {
		console.log("-> Client disconnected.");

		// Si el cliente esta en mi lista the Auth Clients, lo remuevo
		if ( client.auth ) {
			Self.clientList.splice( Self.clientList.indexOf(client.socket.id), 1 );
		}
	});	


	// @ SignUp 			- Creates new users
	//
	client.socket.on('signUp', function( requestData ) {
		console.log("> Event triggered: 'signUp' @ " + client.socket.id );


		// Only non-signed up users may create new accounts
		if ( client.auth ) {
			client.socket.emit('onSignUpError', {code: 403, description:'You already have an account.'});
			return false;
		}

		// Validate de requested new 'username'
		for (var i=0; i<Self.userList.length; i++) {

			if ( Self.userList[i].username == requestData.username ) {
				client.socket.emit('onSignUpError', {code: 409, description:'Username already exist, please choose something else.'});
				return false;
			}

		}

		// Add the new user and respond to the client before disconnecting
		var newUser = { username : requestData.username, displayName : requestData.displayName };
		Self.userList.push(newUser);

		client.socket.emit('onSignUp', newUser);

		client.socket.disconnect();
	});


	// @ getUserList 		- Gets a list of all registered users
	//	
	Self.addAuthEventListener(client, 'getUserList', function() {

		// Send the user's list
		if ( Self.userList.length > 0 ) {
			client.socket.emit( 'onGetUserList', Self.userList );
		} else {
			client.socket.emit( 'onGetUserListError', { code:500, description: "Could not retrieve user list from server." });
		}

	});


	// @ getUserProfile 	- Gets a user's profile  (default is current client's username)
	//
	Self.addAuthEventListener(client, 'getUserProfile', function( requestData ) {

		var profile = null;
		if ( !(profile = Self.userSearch(requestData.username || client.socket.username)) ) {
			client.socket.emit('onGetUserProfileError', { code:404, description:'The requested profile was not found'});
			return false;
		}

		client.socket.emit('onGetUserProfile', profile);
	});


	// @ followUser 		- Starts following a user
	//
	Self.addAuthEventListener(client, 'followUser', function( requestData ) {

		// Respond emitting an event
		client.socket.emit('onFollowUser', requestData.username);
	});


	// @ unfollowUser 		- Stops following a user
	//
	Self.addAuthEventListener(client, 'unfollowUser', function( requestData ) {

		// Respond emitting an event
		client.socket.emit('onUnfollowUser', requestData.username);
	});	


	// @ getTimeline 		- Gets the timeline of a username (default is client's)
	//
	Self.addAuthEventListener(client, 'getTimeline', function( requestData ) {

		// Respond emitting an event
		client.socket.emit('onGetTimeline', timeline);
	});	

	// @ postTweet 			- Posts a new Tweet 
	//
	Self.addAuthEventListener(client, 'postTweet', function( requestData ) {

		// Respond emitting an event
		client.socket.emit('onPostTweet', timeline[0]);
	});	


};


/* 		Authentificates a socket connection by retrieving it's query.username value
**		When a connection is authentificated, we set it up as a new client connection
**		'username' must also exist
**
**		socket:             Socket to be authentificated
**                 
*/ 
ClientManager.prototype.authentificate = function( client ) {
	var Self = this;
	var profile = [];

	// If we got 'username' within the query
	if ( client.username ) {

		// If the received 'username' corresponds to an existing profile
		if ( (profile = Self.userSearch( client.username )) ) {

			// Set client as authentificated
			client.auth = true;

		} else {

			console.log("> Requested username '"+ client.username +"' unexistant.");
			return new Error({ code: 404, description: "The requested user does not exist."});
		}
	}

	// Return AUTH status
	return client.auth;
};


/*		Adds listeners that require an 'username' passed by query string.
**
**		socket:             Socket to wich the event will be binded
**		username:           Client's username
**		fnCallback:   		The actual callback function to be binded
**                        
*/ 
ClientManager.prototype.addAuthEventListener = function( client, event, fnCallback ) {

    client.socket.on(event, function( requestData ) {
		console.log("-> Event triggered: '"+ event +"' @ " + client.socket.id);

		// Is this an authentificated socket?
        if ( client.auth ) {
			return fnCallback.apply(this, arguments);
		}

		// Disconnect unathorized clients
		console.log("---> Authentification failed!");
		client.socket.disconnect();
		return new Error("{ code: 403, description: 'You must specify a username in your query' }");  
    });
}

module.exports = ClientManager;